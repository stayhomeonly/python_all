{
  "uid" : "e4b3684351097eb5",
  "name" : "test_login[data0]",
  "fullName" : "testcase.test_login.TestLogin#test_login",
  "historyId" : "020533943cd55a5ca156051ace37e7ae",
  "time" : {
    "start" : 1662282206947,
    "stop" : 1662282206955,
    "duration" : 8
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert '登录成功' in \"{'code': 1007, 'msg': '用户名或者密码错误'}\"\n +  where \"{'code': 1007, 'msg': '用户名或者密码错误'}\" = str({'code': 1007, 'msg': '用户名或者密码错误'})",
  "statusTrace" : "self = <autotest01.testcase.test_login.TestLogin object at 0x000001B160377390>\ndata = {'case_data': {'password': 'a123456', 'typeId': '101', 'username': 'xiaozhen'}, 'exp': '登录成功'}\n\n    @pytest.mark.parametrize('data', datas)  # 第一个入参 str  变量 用来接收数据源的数据   2.数据源要求失list或者tuple类型\n    def test_login(self, data):  # 我们要讲变量作为入参传到测试方法里面才能参数化 测试用例\n        res = requests.get(url='http://127.0.0.1:6666/business/token_login', params=data['case_data'])\n        res = res.json()\n        print(res)\n        # assert data['exp'] == res['msg']\n>       assert data['exp'] in str(res)\nE       assert '登录成功' in \"{'code': 1007, 'msg': '用户名或者密码错误'}\"\nE        +  where \"{'code': 1007, 'msg': '用户名或者密码错误'}\" = str({'code': 1007, 'msg': '用户名或者密码错误'})\n\ntestcase\\test_login.py:25: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert '登录成功' in \"{'code': 1007, 'msg': '用户名或者密码错误'}\"\n +  where \"{'code': 1007, 'msg': '用户名或者密码错误'}\" = str({'code': 1007, 'msg': '用户名或者密码错误'})",
    "statusTrace" : "self = <autotest01.testcase.test_login.TestLogin object at 0x000001B160377390>\ndata = {'case_data': {'password': 'a123456', 'typeId': '101', 'username': 'xiaozhen'}, 'exp': '登录成功'}\n\n    @pytest.mark.parametrize('data', datas)  # 第一个入参 str  变量 用来接收数据源的数据   2.数据源要求失list或者tuple类型\n    def test_login(self, data):  # 我们要讲变量作为入参传到测试方法里面才能参数化 测试用例\n        res = requests.get(url='http://127.0.0.1:6666/business/token_login', params=data['case_data'])\n        res = res.json()\n        print(res)\n        # assert data['exp'] == res['msg']\n>       assert data['exp'] in str(res)\nE       assert '登录成功' in \"{'code': 1007, 'msg': '用户名或者密码错误'}\"\nE        +  where \"{'code': 1007, 'msg': '用户名或者密码错误'}\" = str({'code': 1007, 'msg': '用户名或者密码错误'})\n\ntestcase\\test_login.py:25: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1bdc2f862f5db63d",
      "name" : "stdout",
      "source" : "1bdc2f862f5db63d.txt",
      "type" : "text/plain",
      "size" : 53
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-4A9BNHE"
  }, {
    "name" : "thread",
    "value" : "9260-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'case_data': {'username': 'xiaozhen', 'password': 'a123456', 'typeId': '101'}, 'exp': '登录成功'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "e4b3684351097eb5.json",
  "parameterValues" : [ "{'case_data': {'username': 'xiaozhen', 'password': 'a123456', 'typeId': '101'}, 'exp': '登录成功'}" ]
}